{"version":3,"sources":["components/CardLists/index.tsx","components/Profile/TypingText.tsx","components/Profile/index.tsx","components/Navbar/index.tsx","components/Project/card.tsx","components/Project/index.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["ReactGA","initialize","CardList","useState","data","loading","state","setState","useEffect","Tabletop","init","key","process","callback","googleData","arr","sort","a","b","c","Date","date","valueOf","simpleSheet","className","Container","Row","size","visible","radius","color","stroke","dataCards","colors","map","props","i","body","inverse","CardHeader","topic","CardBody","CardText","remark","href","reference","Button","onClick","event","category","action","CardFooter","renderCards","TypingText","text","typedText","setTypedText","index","interval","setInterval","slice","clearInterval","Profile","NavBar","Navbar","bg","variant","fixed","Collapse","Nav","Link","Card","imgSrc","link","src","alt","Project","setData","loadData","mockData","project","d","App","pageview","window","location","pathname","search","id","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bee58a1a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport {\n  Card,\n  Button,\n  CardText,\n  CardFooter,\n  CardBody,\n  CardHeader,\n} from 'reactstrap';\nimport { Container, Row } from 'react-bootstrap';\nimport Spinner from 'react-spinner-material';\n\nimport ReactGA from 'react-ga';\n// @ts-ignore\nimport Tabletop from 'tabletop';\nReactGA.initialize('UA-141787668-1');\n\nconst renderCards = (dataCards: IMyGooglesheet[]) => {\n  var colors = ['info', 'primary'];\n  return dataCards.map((props: any, i) => (\n    // @ts-ignore\n    <Card\n      key={i}\n      body\n      inverse\n      color={colors[i % 2]}\n      className=\"Card-item text-center\"\n    >\n      {/* @ts-ignore */}\n      <CardHeader>{props.topic}</CardHeader>\n      {/* @ts-ignore */}\n      <CardBody>\n      {/* @ts-ignore */}\n        <CardText>{props.remark}</CardText>\n        <a href={props.reference}>\n      {/* @ts-ignore */}\n          <Button\n            color=\"dark\"\n            onClick={() => {\n              ReactGA.event({\n                category: 'User',\n                action: 'Click',\n              });\n            } }\n          >\n            Link\n          </Button>\n        </a>\n      </CardBody>\n      {/* @ts-ignore */}\n      <CardFooter>{props.date}</CardFooter>\n    </Card>\n  ));\n};\ninterface IMyGooglesheet {\n  topic: string;\n  remark: string;\n  reference: string;\n  date: string;\n  type: string;\n}\ninterface IState {\n  data: IMyGooglesheet[];\n  loading: boolean;\n}\n\nconst CardList = () => {\n  const [state, setState] = useState<IState>({\n    data: [],\n    loading: true,\n  });\n\n  const sortDate = (arr: IMyGooglesheet[]) => {\n    return arr.sort(function(a, b) {\n      var c = new Date(a.date);\n      var d = new Date(b.date);\n      return d.valueOf() - c.valueOf();\n  });\n  }\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      setState({\n        data: sortDate([\n          {\n            topic: 'TDD',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=q0wdEt1IMiY',\n            date: '2018-11-14',\n            type: 'information technology',\n          },\n          {\n            topic: 'Scrum master',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=JNFeXBRqdsI',\n            date: '2018-11-20',\n            type: 'information technology',\n          },\n          {\n            topic: 'Retrospective',\n            remark: '',\n            reference: 'https://www.youtube.com/watch?v=ZP8c1PtAqO4&t=999s',\n            date: '2018-11-23',\n            type: 'information technology',\n          },\n          {\n            topic: 'Flutter',\n            remark: 'Try to build first andriod app with flutter',\n            reference: 'https://flutter.dev/docs/get-started/codelab',\n            date: '2019-05-13',\n            type: 'information technology',\n          },\n          {\n            topic: 'Github page',\n            remark: 'Github page with react',\n            reference:\n              'https://codeburst.io/deploy-react-to-github-pages-to-create-an-amazing-website-42d8b09cd4d',\n            date: '2019-05-16',\n            type: 'information technology',\n          },\n          {\n            topic: 'CI/CD Pipeline: A Gentle Introduction',\n            remark: '',\n            reference:\n              'https://dev.to/markoa/ci-cd-pipeline-a-gentle-intrâ€¦=email&utm_term=0_d8f11d5d1e-345e02f878-154991169',\n            date: '2019-05-20',\n            type: 'information technology',\n          },\n          {\n            topic: 'Travis CI',\n            remark: 'Use travis in this github page',\n            reference: 'https://travis-ci.org/Kittichok/website',\n            date: '2019-10-03',\n            type: 'CI/CD',\n          },\n        ]),\n        loading: false,\n      });\n    }\n    Tabletop.init({\n      key: process.env.REACT_APP_G_KEY,\n      callback: (googleData: any) => {\n        // googleData.sort(function (a: any, b: any) {\n        //   return new Date(b.date) - new Date(a.date);\n        // });\n        setState({ data: sortDate(googleData), loading: false });\n      },\n      simpleSheet: true,\n    });\n  }, []);\n\n  return (\n    <div className=\"Card-list\">\n      <Container>\n        <Row>\n          <h1 className=\"Center-text\">Journey of me</h1>\n        </Row>\n        <Row>\n          <div className=\"Center-text\">\n            <Spinner\n              size={250}\n              visible={state.loading}\n              radius={100}\n              color={'#1ba8a4'}\n              stroke={10}\n            />\n          </div>\n          {/* <CardDeck> */}\n          {renderCards(state.data)}\n          {/* </CardDeck> */}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { useState, useEffect } from 'react';\n\nconst TypingText = ({ text }: any) => {\n  const [typedText, setTypedText] = useState('');\n  let index = 0;\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTypedText(text.slice(0, index));\n      index++;\n    }, 100);\n    return () => clearInterval(interval);\n  }, [text]);\n\n  return <p className=\"text-center align-middle topic my-auto\" >{typedText}</p>;\n};\n\nexport default TypingText;\n","import React from 'react';\nimport './index.css';\nimport TypingText from './TypingText'\n\nconst Profile = () => {\n  return (\n    <div className=\"container-center\">\n      <TypingText text=\"Hello, I am a Software developer\" />\n    </div>\n  )\n}\n\n\nexport default Profile;","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\n\nconst NavBar = () => {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav>\n              <Nav.Link href=\"#profile\">Profile</Nav.Link>\n              <Nav.Link href=\"#project\">Project</Nav.Link>\n              <Nav.Link href=\"#journey\">Journey</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default NavBar;","import React from 'react';\nimport './index.css'\n\nconst Card = ({ imgSrc, text, link }: any) => {\n  return (\n    <div className=\"card-item\">\n      <img src={imgSrc} className=\"card-img-top\" alt=\"card\"/>\n      <div className=\"card-body\">\n        <p className=\"card-text\">{text}</p>\n        <a href={link} className=\"btn btn-primary\">Learn More</a>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React, { useEffect, useState } from 'react';\nimport Card from './card'\nimport mockData from '../../mock/data.json';\nimport { Container, Row } from 'react-bootstrap';\n\ntype IData = {\n  imgSrc: string;\n  text: string\n  link: string;\n}\n\n\nconst Project = () => {\n  const [data, setData] = useState<IData[]>([])\n  const loadData = async () => {\n    // TODO: use db from server\n    const arr = [...mockData.project]\n    setData(arr)\n  }\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  return (\n\n    <div className=\"Card-list\">\n      <Container>\n        <Row>\n          <h1 className=\"Center-text\">Project</h1>\n        </Row>\n        <Row>\n          {data && data?.map((d, i) => (\n            <Card\n              key={i}\n              imgSrc={d.imgSrc}\n              text={d.text}\n              link={d.link}\n            />\n          ))}\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Project;","import React from 'react';\nimport './App.css';\nimport CardList from './components/CardLists';\nimport ReactGA from 'react-ga';\nimport Profile from './components/Profile';\nimport NavBar from './components/Navbar';\nimport Project from './components/Project';\nReactGA.initialize('UA-141787668-1');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {ReactGA.pageview(window.location.pathname + window.location.search)}\n      <NavBar />\n      <div className=\"full-screen\" id=\"profile\">\n        <Profile />\n      </div>\n      <div className=\"full-screen\" id=\"project\">\n        <Project />\n      </div>\n      <div className=\"full-screen\" id=\"journey\">\n        <CardList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Card list\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n        <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}